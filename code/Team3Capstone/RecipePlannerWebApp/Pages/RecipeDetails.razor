@page "/recipe-details/{RecipeTitle}/{RecipeId}"
@layout MainLayout
@using RecipePlannerApi.Service;
@using RecipePlannerApi.Model;
@using RecipePlannerApi.Dao;
@using RecipePlannerApi.Api;
@inject IJSRuntime JsRuntime;
@inject NavigationManager Nav;
@using RecipePlannerWebApp.LocalServices;
@inject UserSessionData currentUserData;

<div class="split right">
    <div class="header">
        <span>recipes</span>
        <hr style="height: 2px; opacity: 100%" />
    </div>
    @if (this.currentUserData.SelectedMeal is not null)
    {
        if (this.currentUserData.NewMeal)
        {
            <button style="margin-left: 60px" @onclick="addToMealPlan">Add to meal plan for @this.currentUserData.SelectedMeal?.MealType.ToString().ToLower()</button>
        } else
        {
            <button style="margin-left: 60px" @onclick="updateMealPlan">Update meal plan for @this.currentUserData.SelectedMeal?.MealType.ToString().ToLower()</button>
        }

    }
    <div class="recipe-area">
        <h2 class="title" style="font-weight: bold">@RecipeTitle</h2>
        <br />
        <h3 style="text-decoration: underline">Ingredients:</h3>
        <ul>
            @foreach (var ingredient in this.ingredients)
            {
                <li>@ingredient.IngredientName: @ingredient.Quantity @ingredient.Unit</li>
            }
        </ul>
        <br />
        <h3 style="text-decoration: underline">Directions:</h3>
        <ol>
            @foreach (var step in this.steps)
            {
                <li>@step.instructions</li>
            }
        </ol>
        <br />
        <button @onclick="goBack">&#8672 Back</button>
    </div>

</div>

@code {

    [Parameter]
    public string? RecipeId { get; set; }
    [Parameter]
    public string? RecipeTitle { get; set; }

    private List<RecipePlannerApi.Model.Ingredient>? ingredients { get; set; } 
    private List<RecipePlannerApi.Model.RecipesStep>? steps { get; set; }
    private RecipeService recipeService { get; set; } = new RecipeService(new UserService(new UserDao(), new PantryDao()), new IngredientDao(), new RecipeApi(), new MeasurementService());
    private MealPlanService mealPlanService { get; set; } = new MealPlanService(new MealPlanDao());

    /**
     * Handles initialization of the RecipeDetails component
     */
    protected override void OnInitialized()
    {
        RecipeInformation info = this.recipeService.GetRecipeInformation(Int32.Parse(this.RecipeId));
        if (info != null)
        {
            this.ingredients = info?.Ingredients;
            this.steps = info?.Steps;
        }
        else
        {
            JsRuntime.InvokeAsync<bool>("alert", "Unable to fetch recipe details from server.\nPlease try again later.");
        }
    }

    /**
     * Handles page navigation back to either the Explore page or
     * the Recipes page, depending on which page generated the 
     * request for the detail view initially
     */
    private void goBack()
    {
        if (this.currentUserData.SelectedMeal != null)
        {
            this.currentUserData.SelectedMeal = null;
            Nav.NavigateTo("/planner");
        }
        else if (this.currentUserData.lastExplorePageRequest != null)
        {
            Nav.NavigateTo("/explore");
        }
        else
        {
            Nav.NavigateTo("/recipes");
        }
    }

    private void addToMealPlan()
    {
        Meal newMeal = this.currentUserData.SelectedMeal;
        RecipeInformation info = this.recipeService.GetRecipeInformation(Int32.Parse(this.RecipeId));
        Recipe recipe = new Recipe() { Title = this.RecipeTitle, Image = info.Image, ApiId = Int32.Parse(this.RecipeId), ImageType = info.ImageType};
        
        newMeal.Recipe = recipe;
        Console.WriteLine("Adding meal to plan for " + this.currentUserData.SelectedMeal.MealType + " on " + this.currentUserData.SelectedMeal.DayOfWeek);
        this.mealPlanService.AddMeal(newMeal);

        this.currentUserData.SelectedMeal = null;
        this.currentUserData.NewMeal = false;
        Nav.NavigateTo("/planner");
    }

    private void updateMealPlan()
    {
        Meal currMeal = this.currentUserData.SelectedMeal;
        RecipeInformation info = this.recipeService.GetRecipeInformation(Int32.Parse(this.RecipeId));
        Recipe recipe = new Recipe() { Title = this.RecipeTitle, Image = info.Image, ApiId = Int32.Parse(this.RecipeId), ImageType = info.ImageType };
        currMeal.Recipe = recipe;

        Console.WriteLine("Updating mealplan for " + this.currentUserData.SelectedMeal.MealType + " on " + this.currentUserData.SelectedMeal.DayOfWeek);
        this.mealPlanService.UpdateMeal(currMeal);
    
        this.currentUserData.SelectedMeal = null;
        this.currentUserData.NewMeal = false;
        Nav.NavigateTo("/planner");
    }

    //FUTUREPROOFING - DISREGARD
    //<button @onclick="updateUsedIngredientQuantities">Mark as Complete</button>
    //private void updateUsedIngredientQuantities()
    //{
    //    Console.WriteLine("RECIPEVIEW -- Completed recipe for " + this.RecipeName);
    //    foreach (string ingredient in this.ingredients)
    //    {
    //        Console.WriteLine("RECIPEVIEW -- Updating quantity for " + ingredient);
    //    }
    //    //Call RPApi to update quantities of user's ingredients
    //    Nav.NavigateTo("/recipes");
    //}
}