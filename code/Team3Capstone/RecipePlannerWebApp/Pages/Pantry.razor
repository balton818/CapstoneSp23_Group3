@page "/pantry"
@layout MainLayout;
@using RecipePlannerApi.Model;
@using RecipePlannerApi.Service;
@using RecipePlannerApi.Dao;
@using RecipePlannerWebApp.LocalServices;
@using RecipePlannerWebApp.Components;
@using System.Text.RegularExpressions;
@inject NavigationManager Nav;
@inject UserSessionData currentUserData;
@inject IJSRuntime JsRuntime;

<PageTitle>foodie - pantry</PageTitle>

<link href="RecipePlannerWebApp.styles.css" rel="stylesheet">

<div class="split right">
    <div class="header">
        <span id="header">pantry</span>
        <hr style="height: 2px; opacity: 100%" />
    </div>
    <div class="new-ingredient">
        <form>
            <span style="font-weight:bold">Add Ingredient to Pantry:</span>
            <br />
            <input @bind="newIngredientName" placeholder="Enter Ingredient Name" required/>
            <input @bind="newIngredientQuantity" placeholder="Enter Quantity" required/>
            <select @bind="newIngredientUnit" id="ingredient-units">
                @foreach (var unit in Enum.GetValues(typeof(AppUnit))) 
                {
                    @if (unit.Equals(AppUnit.NONE))
                    {
                        <option value=@unit>COUNT</option>
                    }
                    else
                    {
                        <option value=@unit>@unit</option>
                    }
                }
            </select>
            <button id="add-ingredient" @onclick="addNewIngredient">Add to Pantry</button>
        </form>
    </div>
    
    <div class="pantry">
        <div class="row navBoxGrid">
        @foreach (var ingredient in this.ingredients)
        {
            <div class="col navBox">
                <Ingredient IngredientName="@ingredient.IngredientName" IngredientQuantity="@ingredient.Quantity" IngredientId="@ingredient.PantryId" IngredientUnit="@ingredient.UnitId"/>
            </div>
        }
        </div>
    </div>
</div>

@code
{
    private List<PantryItem>? ingredients { get; set; }
    private string newIngredientName { get; set; }
    private string newIngredientQuantity { get; set; }
    private AppUnit newIngredientUnit { get; set; }
    private string IngredientToRemove { get; set; }
    private UserService service { get; set; } = new UserService(new UserDao(), new PantryDao());

    /**
     * Handles initialization of the Pantry component
     */
    protected override void OnInitialized()
    {
        Console.WriteLine("\nPANTRY -- Initializing...");
        Console.WriteLine("User #" + currentUserData.CurrentUser.Id + " just logged in.");
        this.currentUserData.lastExplorePageRequest = null;
        this.ingredients = this.service.GetUserPantry(currentUserData.CurrentUser.Id);
    }

    /**
     * Handles ingredient creation by sending user input to the
     * addPantryItem endpoint
     */
    private async void addNewIngredient()
    {
        bool validFields = this.validateInput();
        if (!validFields)
        {
            return;
        }
        try
        {
            PantryItem newItem = new PantryItem()
                {
                    IngredientName = this.newIngredientName,
                    Quantity = int.Parse(this.newIngredientQuantity),
                    UserId = currentUserData.CurrentUser.Id,
                    UnitId = this.newIngredientUnit
                };
            this.service.AddPantryItem(newItem);
        } catch (System.Exception exc)
        {
            await JsRuntime.InvokeVoidAsync("alert", "There was an error adding your new ingredient:\n" + exc.Message);
        }

        Nav.NavigateTo("/pantry", true);
    }

    private bool validateInput()
    {
        bool validInput = true;
        if (String.IsNullOrWhiteSpace(this.newIngredientName))
        {
            JsRuntime.InvokeAsync<object>("alert", "Please enter a name for your ingredient.");
            validInput = false;
        }

        var pattern = new Regex("[^\\d+]", RegexOptions.Compiled | RegexOptions.IgnoreCase);
        if (String.IsNullOrEmpty(this.newIngredientQuantity))
        {
            JsRuntime.InvokeAsync<object>("alert", "Please enter a value for quantity.");
            validInput = false;            
        }
        else if (pattern.IsMatch(this.newIngredientQuantity))
        {
            JsRuntime.InvokeAsync<object>("alert", "Please enter a valid, numeric quantity.");
            validInput = false;
        }

        if (this.newIngredientUnit == null)
        {
            JsRuntime.InvokeAsync<object>("alert", "Please enter a valid unit.");
            validInput = false;
        }
        return validInput;
    }
}