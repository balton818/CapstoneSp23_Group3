@page "/recipes"
@layout MainLayout
@using RecipePlannerApi.Api.Interface;
@using RecipePlannerApi.Service;
@using RecipePlannerApi.Model;
@using RecipePlannerApi.Api;
@using RecipePlannerApi.Dao;
@using RecipePlannerWebApp.LocalServices;
@inject IJSRuntime JsRuntime;
@inject NavigationManager Nav;
@inject UserSessionData currentUser;

<PageTitle>foodie - recipes</PageTitle>
<base href="~/" />
<div class="split right">
    <div class="header">
        <span id="header">recipes</span>
        <hr style="height: 2px; opacity: 100%" />
    </div>    
    <div class="recipe-list-area">
        @foreach (var recipe in recipeResults)
        {
            <div class="recipe-result" @onclick="() => goToRecipe(recipe.Title, recipe.ApiId ?? 0)">
                <img src="@recipe.Image" asp-append-version="true" style="width: 125px; height: 125px;" />
                @recipe.Title
             </div>
        }
    </div>
</div>

@code {
    private List<Recipe> recipeResults { get; set; } = new List<Recipe>();
    private string[] mealTypeFilters { get; set; } = new[] { "", "appetizer", "beverage", "bread", "breakfast", "dessert",
        "drink", "fingerfood", "main course", "marinade", "salad", "sauce", "side dish", "snack", "soup" };
    private string mealTypeFilterSelection = "";
    private RecipeService service { get; set; } = new RecipeService(new UserService(new UserDao(), new PantryDao()), new IngredientDao(), new RecipeApi(new com.spoonacular.RecipesApi()), new MeasurementService(), new ShoppingListService(new ShoppingListDao()));

    /**
     * Handles initialization of the Recipes component
     */
    protected override void OnInitialized()
    {
        Console.WriteLine("RECIPES -- Initializing...");
        this.currentUser.lastExplorePageRequest = null;
        try
        {
            List<Recipe> recipes = this.service.GetRecipesByUserPantry(this.currentUser.CurrentUser.Id);
            if (recipes != null)
            {
                this.recipeResults = recipes;
                this.currentUser.lastExplorePageRequest = null;
            }
        }
        catch (System.Data.SqlClient.SqlException sqlEx)
        {
            JsRuntime.InvokeAsync<bool>("alert", "Unable to fetch recipes.\nPlease try again later.");
            Console.WriteLine("\nSQL ERR -- Err:\n" + sqlEx.Message);
            Console.WriteLine(sqlEx.StackTrace);
        } catch (System.Exception exc)
        {
            JsRuntime.InvokeAsync<bool>("alert", "Unable to fetch recipes.\nPlease try again later.");
            Console.WriteLine("\nGEN ERR -- Err:\n" + exc.Message);
            Console.WriteLine(exc.StackTrace);
        }

    }

    /**
     * Handles page navigation to show the details for the recipe
     * that was clicked.
     * @param recipeTitle - the recipe title
     * @param recipeId - the recipe id
     */
    private void goToRecipe(string recipeTitle, int recipeId)
    {
        Console.WriteLine("Recipe clicked: " + recipeId);
        Nav.NavigateTo("recipe-details/" + recipeTitle + "/" + recipeId);
    }
}