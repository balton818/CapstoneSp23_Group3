@page "/groceries"
@layout MainLayout
@using RecipePlannerApi.Service;
@using RecipePlannerApi.Model;
@using RecipePlannerApi.Dao;
@using RecipePlannerApi.Api;
@inject IJSRuntime JsRuntime;
@inject NavigationManager Nav;
@using RecipePlannerWebApp.LocalServices;
@inject UserSessionData currentUserData;
@using RecipePlannerWebApp.Components;

<PageTitle>foodie - groceries</PageTitle>
<div class="split right">
    <div class="header">
        <span>groceries</span>
        <hr style="height: 2px; opacity: 100%" />
    </div>
    <div class="controls">
        <button @onclick="goBack">&#8672 Back to Planner</button>
        <button @onclick="generateMealPlanShoppingList">Generate Grocery List</button>
    </div>
    <div class="shopping-list">
        @if (this.shoppingList.Count == 0)
        {
            <p style="margin-left: 60px;">Looks like your shopping list is empty...</p>
        }
        else
        {
            <br />
            <h4 style="text-decoration: underline">Shopping List</h4>
            @foreach (ShoppingListIngredient item in this.shoppingList)
            {
                <GroceryItem Ingredient="@item" SelectedIngredientIds="this.selectedIngredientIDs"></GroceryItem>
            }
        }
    </div>
    <label style="margin-left: 60px;">Add New Ingredient:</label>
    <div class="new-ingredient">

        <input type="text" placeholder="Name" @bind="newIngredientName" />
        <input type="text" placeholder="Quantity" @bind="newIngredientQuantity" />
        <select @bind="newIngredientUnit">
            @foreach (var unit in Enum.GetValues(typeof(AppUnit)))
            {
                @if (unit.Equals(AppUnit.NONE))
                {
                    <option value="@unit">COUNT</option>
                }
                else
                {
                   <option value="@unit">@unit</option> 
                }                
            }
        </select>
        <button type="submit" @onclick="addNewIngredient">Add to Shopping List</button>
    </div>

    <br />
    <button disabled="@this.hideButtons" style="margin-left: 60px;" @onclick="() => {this.selectAll(true);}">Select All</button>
    <button disabled="@this.hideButtons" style="margin-left: 60px;" @onclick="() => {this.selectAll(false);}">Unselect All</button>
    <button disabled="@this.hideButtons" style="margin-left: 60px;" @onclick="buyGroceries">Purchase Selected Items</button>
    <button disabled="@this.hideButtons" style="margin-left: 60px;" @onclick="removeAllSelected">Remove Selected Items</button>
</div>


@code {
    private List<ShoppingListIngredient> shoppingList = new List<ShoppingListIngredient>();
    private ShoppingListService groceryService = new ShoppingListService(new ShoppingListDao());
    private RecipeService recipeService { get; set; } = new RecipeService(new UserService(new UserDao(), new PantryDao()), new IngredientDao(), new RecipeApi(new com.spoonacular.RecipesApi()), new MeasurementService(), new ShoppingListService(new ShoppingListDao()));
    private MealPlanService mealService { get; set; } = new MealPlanService(new MealPlanDao());
    private Dictionary<ShoppingListIngredient, bool> selectedIngredients;
    private Dictionary<int, bool> selectedIngredientIDs;
    private bool hideButtons = false;

    private string newIngredientName = "";
    private string newIngredientQuantity = "";
    private string newIngredientUnit = "";

    /**
     * Initializes the GroceryPage component
     */
    protected override void OnInitialized()
    {
        Console.WriteLine("Grocery Page -- INITIALIZING");
        this.currentUserData.lastExplorePageRequest = null;
        this.shoppingList = groceryService.GetShoppingList(this.currentUserData.CurrentUser.Id);
        Console.WriteLine(" -- Ingredients:\n");
        this.selectedIngredientIDs = this.currentUserData.userSelectedIDs;
        foreach (var item in this.shoppingList)
        {
            Console.WriteLine(item.IngredientName + ": " + item.Quantity + " " + item.UnitId.ToString());
            //if (!this.selectedIngredients.ContainsKey(item))
            //{
            //    this.selectedIngredients.Add(item, false);
            //}
            if (item.ShoppingListId != null && !this.selectedIngredientIDs.ContainsKey((int)item.ShoppingListId))
            {
                this.selectedIngredientIDs.Add((int)item.ShoppingListId, false);
            }
        }
        this.hideButtons = this.shoppingList.Count == 0;
    }

    /**
     * Handles page navigation back to either the Explore page or
     * the Recipes page, depending on which page generated the
     * request for the detail view initially
     */
    private void goBack()
    {
        this.selectedIngredientIDs.Clear();
        Nav.NavigateTo("/planner");
    }

    private void buyGroceries()
    {
        Console.WriteLine("Buying groceries");
        List<ShoppingListIngredient> ingredients = this.getSelectedIngredients();
        try
        {
            this.recipeService.BuyIngredients(ingredients, this.currentUserData.CurrentUser.Id);

            this.selectedIngredientIDs.Clear();
            Console.WriteLine(" -- Done buying groceries");
            Nav.NavigateTo("/pantry");
        }
        catch (System.Data.SqlClient.SqlException sqlEx)
        {
            Console.WriteLine(" -- Err: " + sqlEx.Message + "\n" + sqlEx.StackTrace);
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(" -- Err: " + ex.Message + "\n" + ex.StackTrace);
        }
    }

    private async void removeAllSelected()
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you wish to permanently remove these items from your list?");
        if (confirm)
        {
            Console.WriteLine("Removing groceries");
            List<ShoppingListIngredient> selection = this.getSelectedIngredients();
            this.groceryService.DeleteAllFromShoppingList(selection);
            this.selectedIngredientIDs.Clear();
            Nav.NavigateTo("/groceries", true);
        }
    }

    private List<int> getSelectedIngredientIDs()
    {
        List<int> selectedIDs = new List<int>();
        foreach (var id in this.selectedIngredientIDs.Keys)
        {
            if (this.selectedIngredientIDs[id])
            {
                selectedIDs.Add(id);
            }
        }
        return selectedIDs;
    }

    private List<ShoppingListIngredient> getSelectedIngredients()
    {
        List<ShoppingListIngredient> selection = new List<ShoppingListIngredient>();
        foreach (var id in this.getSelectedIngredientIDs())
        {
            foreach (var ingredient in this.shoppingList)
            {
                if (ingredient.ShoppingListId == id)
                {
                    selection.Add(ingredient);
                }
            }
        }
        return selection;
    }

    private async void addNewIngredient()
    {
        if (String.IsNullOrWhiteSpace(this.newIngredientName))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please enter a name for your ingredient.");
            this.newIngredientName = "";
            return;
        }

        int quantity;
        if (!Int32.TryParse(this.newIngredientQuantity, out quantity))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please enter a valid quantity.");
            this.newIngredientQuantity = "";
            StateHasChanged();
            return;
        }

        AppUnit unit;
        if (!Enum.TryParse<AppUnit>(this.newIngredientUnit, out unit))
        {
            await JsRuntime.InvokeAsync<object>("alert", "Please enter a valid unit from the dropdown.");
            return;
        }
        RecipePlannerApi.Model.ShoppingListIngredient newIngredient = new RecipePlannerApi.Model.ShoppingListIngredient() { IngredientName = this.newIngredientName.ToLower(), UserId = this.currentUserData.CurrentUser.Id };
        newIngredient.Quantity = quantity;
        newIngredient.UnitId = unit;

        this.groceryService.UpsertShoppingListIngredient(newIngredient);
        Nav.NavigateTo("/groceries", true);
    }

    private async void generateMealPlanShoppingList()
    {
        bool confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to generate the entire list?\nThis may add duplicate entries to your list.");
        if (confirm)
        {
            Console.WriteLine("-- CONFIRM");
            List<ShoppingListIngredient> ingredients = this.getListOfIngredients();
            
            Nav.NavigateTo("/groceries", true);
        }
    }

    private List<ShoppingListIngredient> getListOfIngredients()
    {
        MealPlan thisWeek = this.mealService.GetThisWeeksMealPlan(this.currentUserData.CurrentUser.Id);
        MealPlan nextWeek = this.mealService.GetNextWeeksMealPlan(this.currentUserData.CurrentUser.Id);
        List<ShoppingListIngredient> convertedIngredients = new List<ShoppingListIngredient>();
        convertedIngredients.AddRange(this.recipeService.AddRecipeIngredientsToShoppingList(thisWeek.Recipes, this.currentUserData.CurrentUser.Id));
        convertedIngredients.AddRange(this.recipeService.AddRecipeIngredientsToShoppingList(nextWeek.Recipes, this.currentUserData.CurrentUser.Id));
        return convertedIngredients;
    }

    private void selectAll(bool shouldCheck)
    {
        //foreach (var selection in this.selectedIngredients.Keys)
        //{
        //    this.selectedIngredients[selection] = shouldCheck;
        //}
        foreach (var selection in this.selectedIngredientIDs.Keys)
        {
            this.selectedIngredientIDs[selection] = shouldCheck;
        }
        Nav.NavigateTo("/groceries", true);
    }
}
