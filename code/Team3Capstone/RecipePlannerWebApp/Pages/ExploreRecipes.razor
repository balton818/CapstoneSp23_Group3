@page "/explore"
@layout MainLayout;
@using RecipePlannerApi.Model;
@using RecipePlannerApi.Service;
@using RecipePlannerApi.Dao;
@using RecipePlannerApi.Api;
@using RecipePlannerApi.Api.Requests;
@using RecipePlannerWebApp.LocalServices;
@inject NavigationManager Nav;
@inject UserSessionData currentUserData;

<PageTitle>foodie - explore</PageTitle>
<base href="~/" />
<div class="split right">
    <div class="header">
        <span>explore</span>
        <hr style="height: 2px; opacity: 100%" />
    </div>
    <div class="search-bar">
        <label>Search Terms:</label>
        <input type="search" @bind="this.searchParam"/>
    </div>
    <div id="filter-options">
        <div class="filter">
            <label for="filter-selector">Meal Type</label>
            <select @bind="@mealTypeFilterSelections" name="filter-selector" size="4" multiple>
                @foreach (var filter in this.mealTypeFilters)
                {
                    <option>@filter</option>
                }
            </select>
        </div>
        <div class="filter">
            <label for="filter-selector2">Cuisine</label>
            <select @bind="@cuisineFilterSelections" name="filter-selector2" size="4" multiple>
                @foreach (var filter in this.cuisineFilters)
                {
                    <option>@filter</option>
                }
            </select>
        </div>
        <div class="filter">
            <label for="filter-selector3">Dietary Restriction</label>
            <select @bind="@dietaryRestrictionFilterSelections" name="filter-selector3" size="4" multiple>
                @foreach (var filter in this.dietaryRestrictionFilters)
                {
                    <option>@filter</option>
                }
            </select>
        </div>
        <button type="submit" class="apply-filter-button" @onclick="applyFilters">Apply</button>
    </div>
    <div class="recipe-list-area">
        <label hidden="@resultsFound" style="font-weight: bold">No results found.</label>
        @foreach (var recipe in this.results)
        {
            <div class="recipe-result" @onclick="() => goToRecipe(recipe.Title, recipe.ApiId ?? 0)">
                <img src="@recipe.Image" asp-append-version="true" style="width: 125px; height: 125px;" />
                @recipe.Title
            </div>
        }
        <div class="pagination-controls">
            <button disabled="@hidePrevPageButton" @onclick="this.viewPreviousPage">&#8672 Previous</button>
            <label>Page: @pageNum</label>
            <button disabled="@hideNextPageButton" @onclick="this.viewNextPage">Next &#8674;</button>
        </div>
        
    </div>

</div>

@code {
    private string[] mealTypeFilters { get; set; } = new[] { "", "appetizer", "beverage", "bread", "breakfast", "dessert",
        "drink", "fingerfood", "main course", "marinade", "salad", "sauce", "side dish", "snack", "soup" };

    private string[] cuisineFilters { get; set; } = new[] { "", "African", "American", "British", "Cajun", "Caribbean",
    "Chinese", "Eastern European", "European", "French", "German", "Greek", "Indian", "Irish", "Italian", "Japanese",
    "Jewish", "Korean", "Latin American", "Mediterranean", "Mexican", "Middle Eastern", "Nordic", "Southern", "Spanish", "Thai", "Vietnamese"};

    private string[] dietaryRestrictionFilters { get; set; } = new[] { "", "Gluten Free", "Ketogenic", "Lacto-Vegetarian",
        "Low FODMAP", "Ovo-Vegetarian", "Paleo", "Pescetarian", "Primal", "Vegan", "Vegetarian", "Whole30" };

    private string mealTypeFilterSelection = "";
    private string cuisineFilterSelection = "";
    private string dietaryRestrictionFilterSelection = "";

    private string[] dietaryRestrictionFilterSelections = new[] { "" };
    private string[] cuisineFilterSelections = new[] { "" };
    private string[] mealTypeFilterSelections = new[] { "" };

    private string searchParam = "";
    private int pageNum = 1;
    private bool resultsFound;
    private bool hidePrevPageButton;
    private bool hideNextPageButton;

    private List<Recipe> results = new List<Recipe>();
    private RecipeService service { get; set; } = new RecipeService(new UserService(new UserDao(), new PantryDao()), new IngredientDao(), new RecipeApi(new com.spoonacular.RecipesApi()), new MeasurementService(), new ShoppingListService(new ShoppingListDao()));

    /**
     * Initializes the ExploreRecipes component
     */
    protected override void OnInitialized()
    {
        this.resultsFound = false;
        this.hideNextPageButton = true;
        this.hidePrevPageButton = true;
        if (this.currentUserData.lastExplorePageRequest != null)
        {
            this.returnFromDetailView();
        } else
        {
            this.browse(); 
        }
    }

    /**
     * Handles page navigation back to the Explore page from a
     * recipe detail view page.
     */
    private void returnFromDetailView()
    {
        this.repopulateFilters();
        this.results = this.service.BrowseRecipes(this.currentUserData.lastExplorePageRequest).recipes;
        this.resultsFound = this.results.Count > 0;
        this.hidePrevPageButton = this.pageNum == 1;
        this.hideNextPageButton = this.pageNum > 35 || !this.resultsFound;
    }

    /**
     *  Handles populating the previous search filter values 
     *  and re-sending the browse request.
     */
    private void repopulateFilters()
    {
        this.searchParam = this.currentUserData.lastExplorePageRequest.Query;
        this.mealTypeFilterSelection = this.currentUserData.lastExplorePageRequest.Type;
        this.cuisineFilterSelection = this.currentUserData.lastExplorePageRequest.Cuisine;
        this.dietaryRestrictionFilterSelection = this.currentUserData.lastExplorePageRequest.Diet;
        this.pageNum = this.currentUserData.lastExplorePageRequest.PageNumber + 1;
    }

    /**
     *  Handles building the request to browse recipes based
     *  on user filtering
     */
    private void browse()
    {
        try
        {
            BrowseRecipeRequest request = new BrowseRecipeRequest()
                {
                    UserId = this.currentUserData.CurrentUser.Id,
                    Query = this.searchParam,
                    Cuisine = this.cuisineFilterSelection,
                    Diet = this.dietaryRestrictionFilterSelection,
                    Type = this.mealTypeFilterSelection,
                    PageNumber = this.pageNum - 1
                };
            this.results = this.service.BrowseRecipes(request).recipes;
            this.resultsFound = this.results.Count > 0;
            this.hidePrevPageButton = this.pageNum == 1;
            this.hideNextPageButton = this.pageNum > 34 || !this.resultsFound;
            this.currentUserData.lastExplorePageRequest = request;
        }
        catch (System.Data.SqlClient.SqlException sqlEx)
        {
            Console.WriteLine("\nSQL ERR -- ");
            Console.WriteLine(sqlEx.Message);
        }
    }

    private void applyFilters()
    {
        string dietSelection = String.Join(", ", this.dietaryRestrictionFilterSelections);
        this.dietaryRestrictionFilterSelection = dietSelection;
        string cuisineSelection = String.Join(", ", this.cuisineFilterSelections);
        this.cuisineFilterSelection = cuisineSelection;
        string mealSelection = String.Join(", ", this.mealTypeFilterSelections);
        this.mealTypeFilterSelection = mealSelection;

        this.pageNum = 1;
        this.browse();
    }

    /**
     *  Handles page navigation to the specified recipe detail view
     *  @param recipeTitle - the title of the recipe
     *  @param recipeId - the recipe id
     */
    private void goToRecipe(string recipeTitle, int recipeId)
    {
        Console.WriteLine("Recipe clicked: " + recipeId);
        Nav.NavigateTo("recipe-details/" + recipeTitle + "/" + recipeId);
    }

    /**
     *  Handles the 'show previous page' pagination functionality.
     */
    private void viewPreviousPage()
    {
        if (this.pageNum > 1)
        {
            this.pageNum--;
            this.browse();
        }
    }

    /**
     *  Handles the 'show next page' pagination functionality.
     */
    private void viewNextPage()
    {
        if (this.pageNum < 35)
        {
            this.pageNum++;
            this.browse();
        }
    }
}
