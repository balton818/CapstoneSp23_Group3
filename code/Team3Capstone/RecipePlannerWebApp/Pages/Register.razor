@page "/register"

@using RecipePlannerApi.Model;
@using RecipePlannerApi.Service;
@inject NavigationManager Nav;
@inject IJSRuntime JsRuntime;

<link href="RecipePlannerWebApp.styles.css" rel="stylesheet">
<PageTitle>foodie - register</PageTitle>

<EditForm Model="@user" OnValidSubmit="@RegisterUser">
    <div id="registration-widget">
        <span class="header">Register for Foodie</span>

        <input id="usernameField" @bind="user.Username" placeholder="Enter Username" required />

        <input id="passwordField" @bind="user.Password" placeholder="Enter Password" required />
        <input id="passwordReentryField" @bind="this.passwordReentry" placeholder="Re-enter Password" required />

        <input id="fnameField" @bind="user.FirstName" placeholder="Enter First Name" required />

        <input id="lnameField" @bind="user.LastName" placeholder="Enter Last Name" required />

        <input id="emailField" type="email" @bind="user.Email" placeholder="Enter Email Address" required />

        <button type="submit" id="submitButton" style="position:center">Submit</button>
        <br />
        <button style="position:center" @onclick="goToLogin">&#8672 Back</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public User user { get; set; } = new User();

    private string passwordReentry { get; set; } = "";

    private void RegisterUser()
    {       
        if (String.Equals(this.user.Password, this.passwordReentry))
        {
            try
            {
                var regResult = UserService.CreateUser(this.user);
                Console.WriteLine("REGISTER -- REG_RESULT " + regResult);
                Nav.NavigateTo("/");
            }
            catch (System.Data.SqlClient.SqlException sqlEx)
            {
                this.alertUser("The username you entered is already in use.\nPlease enter a different username.");
                this.clearUsername();
                Console.WriteLine("\nSQL ERR -- ");
                Console.WriteLine(sqlEx.Message);
            }
            catch (System.Exception exc)
            {
                this.alertUser("There was an issue processing your registration");
                Console.WriteLine("\nERR -- ");
                Console.WriteLine(exc.Message);
            }
            Console.WriteLine("REGISTER -- SUCCESS");
            Console.WriteLine("REGISTER -- " + this.user.Username);

        } else
        {
            this.alertUser("Password values do not match");
            this.clearPasswordFields();
        }
    }

    private async void alertUser(string message)
    {
        await JsRuntime.InvokeVoidAsync("alert", message);
    }

    private void clearPasswordFields()
    {
        this.user.Password = "";
        this.passwordReentry = "";
    }

    private void clearUsername()
    {
        this.user.Username = "";
    }

    private void goToLogin()
    {
        Nav.NavigateTo("/");
    }
}
